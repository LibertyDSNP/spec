{"version":3,"sources":["webpack:///../pages/Identity/Factory.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,2MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,kBACE,GAAM,oBADR,oBAGA,gPAEA,qBAAG,sBAAQC,WAAW,KAAnB,aAAH,gEAAiH,kBAAIA,WAAW,KAAf,OAAjH,6CAC4B,iBAAGA,WAAW,IACtC,KAAQ,sBADgB,iBAD5B,yBAIA,kBACE,GAAM,wBADR,wBAGA,yBACE,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,WAGA,kBAAIA,WAAW,KACb,MAAS,MADX,YAKJ,qBAAOA,WAAW,SAChB,kBAAIA,WAAW,SACb,kBAAIA,WAAW,KACb,MAAS,MADX,OAGA,kBAAIA,WAAW,KACb,MAAS,MADX,gBAMN,kBACE,GAAM,WADR,WAGA,sBACE,kBAAIA,WAAW,MAAf,4DACA,kBAAIA,WAAW,MAAf,gGACA,kBAAIA,WAAW,MAAf,kEAEF,kBACE,GAAM,eADR,eAGA,sBACE,kBAAIA,WAAW,MAAf,wBAA6C,iBAAGA,WAAW,KACvD,KAAQ,sBADiC,mBAI/C,kBACE,GAAM,mBADR,mBAGA,wPAGA,kBACE,GAAM,4BADR,6BAGA,kRAEA,qBAAG,sBAAQA,WAAW,KAAnB,mFAAH,4PAIA,kBACE,GAAM,mDADR,oDAGA,qBAAG,iBAAGA,WAAW,IACb,KAAQ,yDADT,gBAAH,6DAGA,wLACA,kBACE,GAAM,yCADR,0CAGA,yEACE,iBAAGA,WAAW,IACZ,KAAQ,sBADV,qBADF,4DAIA,kBACE,GAAM,6BADR,6BAGA,qIACF,iBAAGA,WAAW,IACR,KAAQ,2CADd,YADE,8IAKA,kBACE,GAAM,8BADR,8BAGA,wZAGA,kBACE,GAAM,WADR,WAGA,+NAEA,kBACE,GAAM,mBADR,mBAGA,sCAAqB,iBAAGA,WAAW,IAC/B,KAAQ,2CADS,YAArB,UAEgC,sBAAQA,WAAW,KAAnB,mBAFhC,uBAGA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,qBADZ,sxCAkCL,kBACE,GAAM,8BADR,8BAGA,mGACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,qBADZ,07DAuDL,kBACE,GAAM,4BADR,4BAGA,oNAEA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,qBADZ,63EAgEL,kBACE,GAAM,oBADR,oBAGA,2FAA0E,iBAAGA,WAAW,IACpF,KAAQ,yGAD8D,WAA1E,4GAGoG,iBAAGA,WAAW,IAC9G,KAAQ,mHADwF,qBAHpG,kBAMA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,qBADZ,4hB,yMAmBTJ,EAAWK,gBAAiB","file":"component---pages-identity-factory-md-9d6441b6ca94589b192a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/spec/spec/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"identity-factory\"\n    }}>{`Identity Factory`}</h1>\n    <p>{`The least expensive way to create a new identity is through an identity factory.\nOfficial contracts will provide one or more of these standard interfaces to easily generate an identity with different upgrade paths.`}</p>\n    <p><strong parentName=\"p\">{`Remember:`}</strong>{` Using a factory or even a proxy is just an optimization and `}<em parentName=\"p\">{`NOT`}</em>{` required.\nAny contract that matches the `}<a parentName=\"p\" {...{\n        \"href\": \"/Identity/Overview\"\n      }}>{`DSNP Identity`}</a>{` interfaces is valid.`}</p>\n    <h2 {...{\n      \"id\": \"specification-status\"\n    }}>{`Specification Status`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Version`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Status`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`0.3`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Tentative`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"purpose\"\n    }}>{`Purpose`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Describe how an Identity Factory can create an identity.`}</li>\n      <li parentName=\"ol\">{`Describe how an Identity Factory can allow someone else to pay for the creation an identity.`}</li>\n      <li parentName=\"ol\">{`Restrict the creation of identities without owner permission.`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"assumptions\"\n    }}>{`Assumptions`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`All assumptions from `}<a parentName=\"li\" {...{\n          \"href\": \"/Identity/Overview\"\n        }}>{`DSNP Identity`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"proxy-contracts\"\n    }}>{`Proxy Contracts`}</h2>\n    <p>{`While it is not required, most of the DSNP Identity compatible contracts are proxy contracts.\nProxy contracts are often created through a factory contract.\nHere are the interfaces to be a DSNP compatible identity factory.`}</p>\n    <h3 {...{\n      \"id\": \"what-is-a-proxy-contract\"\n    }}>{`What is a Proxy Contract?`}</h3>\n    <p>{`Proxy contracts are used to limit the gas for deploying many contracts that all have the same logic, but need different state.\nThe state is maintained at the \"proxy\" contract while the logic to alter the state is able to be in one \"logic\" contract.`}</p>\n    <p><strong parentName=\"p\">{`Remember: A Logic Contract has 100% control over the state of a smart contract.`}</strong>{`\nWhile a logic contract cannot have state that effects the execution of a proxy contract,\na logic contract's code can be written in such a way that allows for others to take control of a contract.\nNever use logic contracts that you do not trust!`}</p>\n    <h3 {...{\n      \"id\": \"what-are-the-different-types-of-proxy-contracts\"\n    }}>{`What are the different types of Proxy Contracts?`}</h3>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://docs.openzeppelin.com/contracts/4.x/api/proxy\"\n      }}>{`OpenZeppelin`}</a>{` has a great set of standard and audited proxy contracts.`}</p>\n    <p>{`While there may not be an identity factory interface for each type, the documentation from OpenZeppelin gives good detail on the differences between the types.`}</p>\n    <h3 {...{\n      \"id\": \"can-i-switch-from-one-type-to-another\"\n    }}>{`Can I switch from one type to another?`}</h3>\n    <p>{`Switching types is possible, but difficult.\nSee `}<a parentName=\"p\" {...{\n        \"href\": \"/Identity/Registry\"\n      }}>{`Identity Registry`}</a>{` for more information on switching an identity contract.`}</p>\n    <h3 {...{\n      \"id\": \"data-storage-and-eip-1967\"\n    }}>{`Data storage and EIP 1967`}</h3>\n    <p>{`Due to the state management system that Ethereum uses, it can easily cause issues for upgradable contracts.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://eips.ethereum.org/EIPS/eip-1967\"\n      }}>{`EIP 1967`}</a>{` provides for ways to safely use state that will not collide.\nImplementations of upgradable proxies MUST use EIP 1967 style data storage.`}</p>\n    <h3 {...{\n      \"id\": \"logic-contract-constraints\"\n    }}>{`Logic Contract Constraints`}</h3>\n    <p>{`Contracts that are used as the logic for the proxy are not able to use constructors for initialization.\nProxy contracts however can have constructors and additionally the factory can be used to call methods once the proxy is created.\nRemember that setting up the initial authorization state of a contract MUST be done in a single transaction to prevent others sniping the contract.`}</p>\n    <h2 {...{\n      \"id\": \"factory\"\n    }}>{`Factory`}</h2>\n    <p>{`An identity factory will give easy methods to allow for the creation of proxy contracts that function as DSNP Identities.\nOfficial implementation contract addresses will be published once deployed.`}</p>\n    <h3 {...{\n      \"id\": \"clone-interface\"\n    }}>{`Clone Interface`}</h3>\n    <p>{`Clones follow `}<a parentName=\"p\" {...{\n        \"href\": \"https://eips.ethereum.org/EIPS/eip-1167\"\n      }}>{`EIP 1167`}</a>{` for a `}<strong parentName=\"p\">{`non-upgradeable`}</strong>{` identity contract.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-solidity\"\n      }}>{`/**\n * @dev DSNP Identity Factory Interface for creating identities via [EIP 1167](https://eips.ethereum.org/EIPS/eip-1167)\n */\ninterface IIdentityCloneFactory {\n\n    /**\n     * @dev event to log the created proxy contract address\n     */\n    event ProxyCreated(address addr);\n\n    /**\n     * @dev Creates a new identity with the message sender as the owner\n     * @dev [EIP 1167](https://eips.ethereum.org/EIPS/eip-1167) Proxy\n     * @param logic The address to use for the logic contract\n     *\n     * @dev This MUST emit ProxyCreated with the address of the new proxy contract\n     * @return The address of the newly created proxy contract\n     */\n    function createCloneProxy(address logic) public returns (address);\n\n    /**\n     * @dev Creates a new identity with the ecrecover address as the owner\n     * @dev [EIP 1167](https://eips.ethereum.org/EIPS/eip-1167) Proxy\n     * @param logic The address to use for the logic contract\n     * @param owner The initial owner's address of the new contract\n     *\n     * @dev This MUST emit ProxyCreated with the address of the new proxy contract\n     * @return The address of the newly created proxy contract\n     */\n    function createCloneProxyWithOwner(address logic, address owner) external returns (address);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"upgradable-proxy-interface\"\n    }}>{`Upgradable Proxy Interface`}</h3>\n    <p>{`Upgradable Proxies can be upgraded by the owner or permissioned delegates.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-solidity\"\n      }}>{`/**\n * @dev DSNP Identity Factory Interface for creating upgradable identities\n */\ninterface IIdentityUpgradableFactory {\n\n    /**\n     * @dev event to log the created proxy contract address\n     */\n    event ProxyCreated(address addr);\n\n    /**\n     * @dev Logs updates to the suggested logic contract\n     * @dev MUST BE emitted when the contract changes the suggested logic address\n     * @param newLogic The new address\n     */\n    event LogicUpdated(address newLogic);\n\n    /**\n     * @dev This may be upgradable by the owner of the factory\n     *\n     * @return The current logic contract suggested by this factory\n     */\n    function getLogic() external view returns (address);\n\n    /**\n     * @dev Creates a new identity with the message sender as the owner\n     *      and will be pointed at the default logic address.\n     *\n     * @dev This MUST emit ProxyCreated with the address of the new proxy contract\n     * @return The address of the newly created proxy contract\n     */\n    function createUpgradableProxy() external returns (address);\n\n    /**\n     * @dev Creates a new identity with the message sender as the owner\n     * @param logic The address to use for the logic contract\n     *\n     * @dev This MUST emit ProxyCreated with the address of the new proxy contract\n     * @return The address of the newly created proxy contract\n     */\n    function createUpgradableProxy(address logic) external returns (address);\n\n    /**\n     * @dev Creates a new identity with the ecrecover address as the owner\n     * @param logic The logic address to use for identity creation\n     * @param owner The initial owner's address of the new contract\n     *\n     * @dev This MUST emit ProxyCreated with the address of the new proxy contract\n     * @return The address of the newly created proxy contract\n     */\n    function createUpgradableProxyWithOwner(address logic, address owner) external returns (address);\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"beacon-factory-interface\"\n    }}>{`Beacon Factory Interface`}</h3>\n    <p>{`Beacon Proxies will use the beacon's logic address and will be upgraded when the beacon's logic address is changed.\nThis is the suggested factory for use on Betanet to remain up to date.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-solidity\"\n      }}>{`/**\n * @dev DSNP Identity Factory Interface for creating beacon following identities\n */\ninterface IIdentityBeaconFactory {\n\n    /**\n     * @dev event to log the created proxy contract address\n     */\n    event ProxyCreated(address addr);\n\n    /**\n     * @dev This MUST NOT be upgradable by the owner of the factory\n     *\n     * @return The current beacon contract suggested by this factory\n     */\n    function getBeacon() external view returns (address);\n\n    /**\n     * @dev Creates a new identity with the message sender as the owner\n     *      Uses the beacon defined by getBeacon()\n     *\n     * @dev This MUST emit ProxyCreated with the address of the new proxy contract\n     * @return The address of the newly created proxy contract\n     */\n    function createBeaconProxy() external returns (address);\n\n    /**\n     * @dev Creates a new identity with the message sender as the owner\n     * @param beacon The beacon address to use for logic contract resolution\n     *\n     * @dev This MUST emit ProxyCreated with the address of the new proxy contract\n     * @return The address of the newly created proxy contract\n     */\n    function createBeaconProxy(address beacon) external returns (address);\n\n    /**\n     * @dev Creates a new identity with the ecrecover address as the owner\n     * @param beacon The beacon address to use logic contract resolution\n     * @param owner The initial owner's address of the new contract\n     *\n     * @dev This MUST emit ProxyCreated with the address of the new proxy contract\n     * @return The address of the newly created proxy contract\n     */\n    function createBeaconProxyWithOwner(address beacon, address owner) external returns (address);\n\n    /**\n     * @dev Creates a new identity with the address as the owner and registers it with a handle\n     * @param beacon The beacon address to use logic contract resolution\n     * @param owner The initial owner's address of the new contract\n     * @param handle The handle the new identity proxy under which should be registered\n     *\n     * @dev This MUST emit ProxyCreated with the address of the new proxy contract\n     * @dev This MUST revert if registration reverts\n     * @dev This MUST emit a DSNPRegistryUpdate\n     */\n    function createAndRegisterBeaconProxy(\n        address beacon,\n        address owner,\n        string calldata handle\n    ) external;\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"beacon-interface\"\n    }}>{`Beacon Interface`}</h3>\n    <p>{`A beacon contract follows the same interface as the OpenZeppelin 4 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0/contracts/proxy/beacon/IBeacon.sol\"\n      }}>{`IBeacon`}</a>{`.\nUpdating the beacon logic address is left to the implementation of the beacon, but the OpenZeppelin 4 `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0/contracts/proxy/beacon/UpgradeableBeacon.sol\"\n      }}>{`UpgradeableBeacon`}</a>{` is suggested.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-solidity\"\n      }}>{`/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *      This follows the interface from OpenZeppelin 4.0.0 [IBeacon](https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0/contracts/proxy/beacon/IBeacon.sol)\n     *\n     * @return A contract address that implements the logic for the proxy\n     */\n    function implementation() external view returns (address);\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}