{"version":3,"sources":["webpack:///../pages/Announcements/Signatures.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"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","file":"component---pages-announcements-signatures-md-e39a85a1ed20634a9639.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/spec/spec/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"announcement-signature\"\n    }}>{`Announcement Signature`}</h1>\n    <p>{`Announcements are signed using recoverable ECDSA signatures similarly to how transactions are signed (`}<a parentName=\"p\" {...{\n        \"href\": \"https://ethereum.github.io/yellowpaper/paper.pdf\"\n      }}>{`Ethereum Yellow Paper Appendix F`}</a>{`).\nThe signatures use the `}<a parentName=\"p\" {...{\n        \"href\": \"https://link.springer.com/chapter/10.1007%2F978-3-662-44893-9_12\"\n      }}>{`SECP-256k1 curve`}</a>{`\nand matches the signature algorithms found in the Ethereum JSON-RPC method `}<a parentName=\"p\" {...{\n        \"href\": \"https://eth.wiki/json-rpc/API#eth_sign\"\n      }}><inlineCode parentName=\"a\">{`eth_sign`}</inlineCode></a>{`.\nAll parties interacting with Announcements should independently validate signatures to guard against creator impersonation.`}</p>\n    <h2 {...{\n      \"id\": \"specification-status\"\n    }}>{`Specification Status`}</h2>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Version`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Status`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`1.0`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Proposed`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"signing-an-announcement\"\n    }}>{`Signing an Announcement`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Serialize all Announcement fields (except the signature field).`}</li>\n      <li parentName=\"ol\">{`Hash the serialized string.`}</li>\n      <li parentName=\"ol\">{`Sign the hash with an SECP-256k1 private key that is `}<a parentName=\"li\" {...{\n          \"href\": \"/Identity/Overview\"\n        }}>{`authorized to Announce`}</a>{` on the given DSNP User Id in the `}<inlineCode parentName=\"li\">{`fromId`}</inlineCode>{` field of the Announcement.`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"serialization\"\n    }}>{`Serialization`}</h3>\n    <ol>\n      <li parentName=\"ol\">{`The key of each field (except the signature field) of the Announcement MUST be concatenated with the value.`}</li>\n      <li parentName=\"ol\">{`Each concatenated field string MUST then be `}<a parentName=\"li\" {...{\n          \"href\": \"http://www.unicode.org/reports/tr10/\"\n        }}>{`sorted alphabetically`}</a>{` and concatenated.`}</li>\n      <li parentName=\"ol\">{`Prefix the alphabetized concatenated string with the `}<a parentName=\"li\" {...{\n          \"href\": \"https://eth.wiki/json-rpc/API#eth_sign\"\n        }}>{`Ethereum RPC prefix`}</a>{` (`}<inlineCode parentName=\"li\">{`\\\\x19Ethereum Signed Message:\\\\n`}</inlineCode>{`) and the byte length of the string.`}</li>\n    </ol>\n    <p><em parentName=\"p\">{`Note: If signing with a wallet, the `}<a parentName=\"em\" {...{\n          \"href\": \"https://eth.wiki/json-rpc/API#eth_sign\"\n        }}>{`Ethereum RPC prefix`}</a>{` will be added by the wallet.`}</em></p>\n    <h4 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"fromId\": \"0x12345\",\n  \"contentHash\": \"0x67890\",\n  \"url\": \"https://www.projectliberty.io/\"\n}\n`}</code></pre>\n    <p>{`Expected serialization:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`\\\\x19Ethereum Signed Message:\\\\n64contentHash0x67890fromId0x12345urlhttps://www.projectliberty.io/\n`}</code></pre>\n    <p>{`Serialization in hexadecimal:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`0x19457468657265756d205369676e6564204d6573736167653a0a3634636f6e74656e74486173683078363738393066726f6d49643078313233343575726c68747470733a2f2f7777772e70726f6a6563746c6962657274792e696f2f\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"hashing\"\n    }}>{`Hashing`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`MUST hash the UTF-8 serialization with `}<a parentName=\"li\" {...{\n          \"href\": \"https://keccak.team/files/Keccak-submission-3.pdf\"\n        }}>{`keccak-256`}</a>{`.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-1\"\n    }}>{`Example`}</h4>\n    <p>{`For the previous example, the resulting hexadecimal hash MUST match:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`0x47a23e34c4325f4461b9355027b314f3eb56d31af549f7da7bd9ef1ce951651e\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"signing\"\n    }}>{`Signing`}</h3>\n    <h4 {...{\n      \"id\": \"wallet-signing\"\n    }}>{`Wallet Signing`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Ethereum Wallets will do the prefix and hashing`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"example-2\"\n    }}>{`Example`}</h4>\n    <p>{`A signature would be unique to the signing key.\nA signature of the previous example with the given private key produces:`}</p>\n    <p>{`Private Key: `}<inlineCode parentName=\"p\">{`0xd9d3b5afb7765ffd9f047fd0d1d9b47d4d538b6a56f1cf29dc160ab9c6d30aa3`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`{\n  v: '0x1b',\n  r: '0xfb2260acfacf83bbb1fdac8a7126a14322c9163c20c6c87d7e9aac72fd15bd34',\n  s: '0x6c1854bdd441e5086b3cfb64c45e78a4cff83878e92ce378ee689343214cdcd6',\n}\n`}</code></pre>\n    <p>{`The compressed form of the above being this (`}<inlineCode parentName=\"p\">{`r + s + v`}</inlineCode>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`0xfb2260acfacf83bbb1fdac8a7126a14322c9163c20c6c87d7e9aac72fd15bd346c1854bdd441e5086b3cfb64c45e78a4cff83878e92ce378ee689343214cdcd61b\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"validating-a-signature\"\n    }}>{`Validating a Signature`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Repeat the serialization above.`}</li>\n      <li parentName=\"ol\">{`Perform `}<a parentName=\"li\" {...{\n          \"href\": \"https://web.archive.org/web/20170921160141/http://cs.ucsb.edu/~koc/ccs130h/notes/ecdsa-cert.pdf\"\n        }}>{`elliptic curve recovery`}</a>{` with the serialization and signature.`}</li>\n      <li parentName=\"ol\">{`Find the `}<a parentName=\"li\" {...{\n          \"href\": \"/Identity/Overview\"\n        }}>{`Identity Contract`}</a>{` for the given `}<inlineCode parentName=\"li\">{`fromId`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Test the recovered Ethereum address against the Identity Contract via `}<inlineCode parentName=\"li\">{`IDelegation.isAuthorizedTo`}</inlineCode>{` with the permission `}<inlineCode parentName=\"li\">{`ANNOUNCE`}</inlineCode>{`.`}</li>\n    </ol>\n    <h4 {...{\n      \"id\": \"example-3\"\n    }}>{`Example`}</h4>\n    <p>{`Given the message and signature provided in the previous examples, the elliptic curve recovery MUST match the following Ethereum address:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`0x59DAD64610319200800D7A9b5259B7CbA937cc12\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"non-normative\"\n    }}>{`Non-Normative`}</h2>\n    <h3 {...{\n      \"id\": \"ethereum-wallets\"\n    }}>{`Ethereum Wallets`}</h3>\n    <p>{`Ethereum wallets can use the JSON-RPC method `}<a parentName=\"p\" {...{\n        \"href\": \"https://eth.wiki/json-rpc/API#eth_sign\"\n      }}><inlineCode parentName=\"a\">{`eth_sign`}</inlineCode></a>{`\nto go directly from announcement serialization sans-prefix to signature.\nThe Announcement Signature specification matches this signature algorithm.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}