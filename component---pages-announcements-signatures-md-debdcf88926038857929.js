(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{vCuQ:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return b})),n.d(t,"default",(function(){return h}));var a=n("Fcif"),i=n("+I+c"),r=(n("mXGw"),n("/FXl")),c=n("TjRS"),b=(n("aD51"),{});void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"pages/Announcements/Signatures.md"}});var l={_frontmatter:b},o=c.a;function h(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)(o,Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"announcement-signature"},"Announcement Signature"),Object(r.b)("p",null,"Announcements are signed using recoverable ECDSA signatures similarly to how transactions are signed (",Object(r.b)("a",{parentName:"p",href:"https://ethereum.github.io/yellowpaper/paper.pdf"},"Ethereum Yellow Paper Appendix F"),").\nThe signatures use the ",Object(r.b)("a",{parentName:"p",href:"https://link.springer.com/chapter/10.1007%2F978-3-662-44893-9_12"},"SECP-256k1 curve"),"\nand matches the signature algorithms found in the Ethereum JSON-RPC method ",Object(r.b)("a",{parentName:"p",href:"https://eth.wiki/json-rpc/API#eth_sign"},Object(r.b)("inlineCode",{parentName:"a"},"eth_sign")),".\nAll parties interacting with Announcements should independently validate signatures to guard against creator impersonation."),Object(r.b)("h2",{id:"signing-an-announcement"},"Signing an Announcement"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Serialize all Announcement fields (except the signature field)."),Object(r.b)("li",{parentName:"ol"},"Hash the serialized string."),Object(r.b)("li",{parentName:"ol"},"Sign the hash with an SECP-256k1 private key that is ",Object(r.b)("a",{parentName:"li",href:"/Identity/Overview"},"authorized to Announce")," on the given DSNP User Id in the ",Object(r.b)("inlineCode",{parentName:"li"},"fromId")," field of the Announcement.")),Object(r.b)("h3",{id:"serialization"},"Serialization"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"The key of each field (except the signature field) of the Announcement MUST be concatenated with the value."),Object(r.b)("li",{parentName:"ol"},"Each concatenated field string MUST then be ",Object(r.b)("a",{parentName:"li",href:"http://www.unicode.org/reports/tr10/"},"sorted alphabetically")," and concatenated."),Object(r.b)("li",{parentName:"ol"},"Prefix the alphabetized concatenated string with the ",Object(r.b)("a",{parentName:"li",href:"https://eth.wiki/json-rpc/API#eth_sign"},"Ethereum RPC prefix")," (",Object(r.b)("inlineCode",{parentName:"li"},"\\x19Ethereum Signed Message:\\n"),") and the byte length of the string.")),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Note: If signing with a wallet, the ",Object(r.b)("a",{parentName:"em",href:"https://eth.wiki/json-rpc/API#eth_sign"},"Ethereum RPC prefix")," will be added by the wallet.")),Object(r.b)("h4",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "fromId": "0x12345",\n  "contentHash": "0x67890",\n  "url": "https://www.projectliberty.io/"\n}\n')),Object(r.b)("p",null,"Expected serialization:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"\\x19Ethereum Signed Message:\\n64contentHash0x67890fromId0x12345urlhttps://www.projectliberty.io/\n")),Object(r.b)("p",null,"Serialization in hexadecimal:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"0x19457468657265756d205369676e6564204d6573736167653a0a3634636f6e74656e74486173683078363738393066726f6d49643078313233343575726c68747470733a2f2f7777772e70726f6a6563746c6962657274792e696f2f\n")),Object(r.b)("h3",{id:"hashing"},"Hashing"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"MUST hash the UTF-8 serialization with ",Object(r.b)("a",{parentName:"li",href:"https://keccak.team/files/Keccak-submission-3.pdf"},"keccak-256"),".")),Object(r.b)("h4",{id:"example-1"},"Example"),Object(r.b)("p",null,"For the previous example, the resulting hexadecimal hash MUST match:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"0x47a23e34c4325f4461b9355027b314f3eb56d31af549f7da7bd9ef1ce951651e\n")),Object(r.b)("h3",{id:"signing"},"Signing"),Object(r.b)("h4",{id:"wallet-signing"},"Wallet Signing"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Ethereum Wallets will do the prefix and hashing")),Object(r.b)("h4",{id:"example-2"},"Example"),Object(r.b)("p",null,"A signature would be unique to the signing key.\nA signature of the previous example with the given private key produces:"),Object(r.b)("p",null,"Private Key: ",Object(r.b)("inlineCode",{parentName:"p"},"0xd9d3b5afb7765ffd9f047fd0d1d9b47d4d538b6a56f1cf29dc160ab9c6d30aa3")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"{\n  v: '0x1b',\n  r: '0xfb2260acfacf83bbb1fdac8a7126a14322c9163c20c6c87d7e9aac72fd15bd34',\n  s: '0x6c1854bdd441e5086b3cfb64c45e78a4cff83878e92ce378ee689343214cdcd6',\n}\n")),Object(r.b)("p",null,"The compressed form of the above being this (",Object(r.b)("inlineCode",{parentName:"p"},"r + s + v"),"):"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"0xfb2260acfacf83bbb1fdac8a7126a14322c9163c20c6c87d7e9aac72fd15bd346c1854bdd441e5086b3cfb64c45e78a4cff83878e92ce378ee689343214cdcd61b\n")),Object(r.b)("h2",{id:"validating-a-signature"},"Validating a Signature"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Repeat the serialization above."),Object(r.b)("li",{parentName:"ol"},"Perform ",Object(r.b)("a",{parentName:"li",href:"https://web.archive.org/web/20170921160141/http://cs.ucsb.edu/~koc/ccs130h/notes/ecdsa-cert.pdf"},"elliptic curve recovery")," with the serialization and signature."),Object(r.b)("li",{parentName:"ol"},"Find the ",Object(r.b)("a",{parentName:"li",href:"/Identity/Overview"},"Identity Contract")," for the given ",Object(r.b)("inlineCode",{parentName:"li"},"fromId"),"."),Object(r.b)("li",{parentName:"ol"},"Test the recovered Ethereum address against the Identity Contract via ",Object(r.b)("inlineCode",{parentName:"li"},"IDelegation.isAuthorizedTo")," with the permission ",Object(r.b)("inlineCode",{parentName:"li"},"ANNOUNCE"),".")),Object(r.b)("h4",{id:"example-3"},"Example"),Object(r.b)("p",null,"Given the message and signature provided in the previous examples, the elliptic curve recovery MUST match the following Ethereum address:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"0x59DAD64610319200800D7A9b5259B7CbA937cc12\n")),Object(r.b)("h2",{id:"non-normative"},"Non-Normative"),Object(r.b)("h3",{id:"ethereum-wallets"},"Ethereum Wallets"),Object(r.b)("p",null,"Ethereum wallets can use the JSON-RPC method ",Object(r.b)("a",{parentName:"p",href:"https://eth.wiki/json-rpc/API#eth_sign"},Object(r.b)("inlineCode",{parentName:"a"},"eth_sign")),"\nto go directly from announcement serialization sans-prefix to signature.\nThe Announcement Signature specification matches this signature algorithm."))}void 0!==h&&h&&h===Object(h)&&Object.isExtensible(h)&&!h.hasOwnProperty("__filemeta")&&Object.defineProperty(h,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"pages/Announcements/Signatures.md"}}),h.isMDXComponent=!0}}]);
//# sourceMappingURL=component---pages-announcements-signatures-md-debdcf88926038857929.js.map